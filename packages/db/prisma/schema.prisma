// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Model {
  id             String              @id @default(uuid())
  name           String
  type           ModelTypeEnum
  age            Int
  ethinicity     ModelEthinicityEnum
  eyeColor       ModelEyeColorEnum
  bald           Boolean
  triggerWord    String?
  tensorPath     String?
  thumbnail      String?
  trainingstatus ModelTrainingStatus @default(Pending)
  outputImages   OutputImages[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String
  falAiRequestId String?
  zipUrl         String
  open           Boolean            @default(false)
}

model OutputImages {
  id             String                @id @default(uuid())
  imageUrl       String
  modelId        String
  userId         String
  prompt         String
  status         ImageGenerationStatus @default(Pending)
  model          Model                 @relation(fields: [modelId], references: [id])
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  falAiRequestId String?
}

model Pack {
  id          String        @id @default(uuid())
  name        String
  description String        @default("")
  imageUrl1   String        @default("")
  imageUrl2   String        @default("")
  prompts     PackPrompts[]
}

model PackPrompts {
  id     String @id @default(uuid())
  prompt String
  packId String
  pack   Pack   @relation(fields: [packId], references: [id])
}

enum ImageGenerationStatus {
  Generated
  Pending
  Failed
}

enum ModelTrainingStatus {
  Completed
  Pending
  Failed
}

enum ModelTypeEnum {
  Man
  Woman
  Other
}

enum ModelEthinicityEnum {
  Black
  White
  South_Asian
  Asian_American
  South_East_Asian
  Hispanic
  Middle_Eastern
  Pacific
  East_Asian
}

enum ModelEyeColorEnum {
  Brown
  Blue
  Hazel
  Grey
}
